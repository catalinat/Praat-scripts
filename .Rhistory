}
}
find_pauses <- function(text_grid) {
pauses_min <- c()
pauses_max <- c()
tier <- -1
xmin <- -1
xmax <- -1
pause <- FALSE
for (row in text_grid) {
tier <- extract_tier(row, tier)
if (tier != 4 ){
# skip to next row (from input text_grid)
# (don't run the lines after in the for loop)
next
}
xmin <- extract_min(row, xmin)
xmax <- extract_max(row, xmax)
if(is_pause(row)){
# we found a pause
pauses_min <- pauses_min %>% append(xmin)
pauses_max <- pauses_max %>% append(xmax)
}
}
list(min=pauses_min, max=pauses_max)
}
add_pauses <- function(text_grid, pauses, target_tier=3, pause_label="P") {
new_text_grid = c()
tier <- -1
xmin <- -1
xmax <- -1
current_pause <- 1
for (row in text_grid) {
tier <- extract_tier(row, tier)
if (tier != target_tier){
# skip to next row (from input text_grid)
# (don't run the lines after in the for loop)
new_text_grid <- c(new_text_grid, row)
next
}
xmin <- extract_min(row, xmin)
xmax <- extract_max(row, xmax)
if(current_pause <= length(pauses$min)
& xmin == pauses$min[current_pause]
& xmax == pauses$max[current_pause]
& str_detect(row, "text =")
) {
# we found an interval matching a pause
row <- gsub("text = \"\"", "text = \"P\"", row)
current_pause <- current_pause + 1 # look for the next pause
}
new_text_grid <- c(new_text_grid, row)
}
new_text_grid
}
save_new_text_grid <- function(source_file, new_text_grid) {
dest_dir <- paste(dirname(source_file), "fixed", sep = '/')
dir.create(dest_dir, showWarnings = FALSE)
dest_file <- paste(dest_dir, basename(source_file), sep = '/')
fileConn <- file(dest_file)
writeLines(new_text_grid, fileConn)
close(fileConn)
sprintf("File %s fixed and saved to %s", source_file, dest_file)
}
add_pauses_file <- function(source_file) {
text_grid <-  readLines(source_file)
pauses <- find_pauses(text_grid)
print(paste(source_file, "Found", length(pauses$min), "pauses"))
new_text_grid <- add_pauses(text_grid, pauses)
save_new_text_grid(source_file, new_text_grid)
}
# Find multiple files in directory
add_pauses_in_directory <- function(directory) {
for (f in list.files(directory, full.names = TRUE, pattern = ".+TextGrid")) {
add_pauses_file(f)
}
}
# Select directory to be used
add_pauses_in_directory("/Users/catalina/Desktop/Emu_R/Viet-stimuli-1/more-stimuli")
add_pauses <- function(text_grid, pauses, target_tier=2, pause_label="P") {
new_text_grid = c()
tier <- -1
xmin <- -1
xmax <- -1
current_pause <- 1
for (row in text_grid) {
tier <- extract_tier(row, tier)
if (tier != target_tier){
# skip to next row (from input text_grid)
# (don't run the lines after in the for loop)
new_text_grid <- c(new_text_grid, row)
next
}
xmin <- extract_min(row, xmin)
xmax <- extract_max(row, xmax)
if(current_pause <= length(pauses$min)
& xmin == pauses$min[current_pause]
& xmax == pauses$max[current_pause]
& str_detect(row, "text =")
) {
# we found an interval matching a pause
row <- gsub("text = \"\"", "text = \"P\"", row)
current_pause <- current_pause + 1 # look for the next pause
}
new_text_grid <- c(new_text_grid, row)
}
new_text_grid
}
save_new_text_grid <- function(source_file, new_text_grid) {
dest_dir <- paste(dirname(source_file), "fixed", sep = '/')
dir.create(dest_dir, showWarnings = FALSE)
dest_file <- paste(dest_dir, basename(source_file), sep = '/')
fileConn <- file(dest_file)
writeLines(new_text_grid, fileConn)
close(fileConn)
sprintf("File %s fixed and saved to %s", source_file, dest_file)
}
add_pauses_file <- function(source_file) {
text_grid <-  readLines(source_file)
pauses <- find_pauses(text_grid)
print(paste(source_file, "Found", length(pauses$min), "pauses"))
new_text_grid <- add_pauses(text_grid, pauses)
save_new_text_grid(source_file, new_text_grid)
}
# Find multiple files in directory
add_pauses_in_directory <- function(directory) {
for (f in list.files(directory, full.names = TRUE, pattern = ".+TextGrid")) {
add_pauses_file(f)
}
}
# Select directory to be used
add_pauses_in_directory("/Users/catalina/Desktop/Emu_R/Viet-stimuli-1/more-stimuli")
library(stringr)
is_pause <- function(row){
new <- str_match(row, "text = \"<p:>\"")[1]
! is.na(new) # Regex matched
}
extract_tier <- function(row, current){
new <- str_match(row, "item \\[(\\d+)\\]:")[2]
if(is.na(new)){ # Regex did not match anything
current
} else {
strtoi(new) # convert to integer
}
}
extract_min <- function(row, current){
new <- str_match(row, "xmin = (.+)")[2]
if(is.na(new)){
current
} else {
as.numeric(new) # convert to numeric
}
}
extract_max <- function(row, current){
new <- str_match(row, "xmax = (.+)")[2]
if(is.na(new)){
current
} else {
as.numeric(new)
}
}
find_pauses <- function(text_grid) {
pauses_min <- c()
pauses_max <- c()
tier <- -1
xmin <- -1
xmax <- -1
pause <- FALSE
for (row in text_grid) {
tier <- extract_tier(row, tier)
if (tier != 6 ){
# skip to next row (from input text_grid)
# (don't run the lines after in the for loop)
next
}
xmin <- extract_min(row, xmin)
xmax <- extract_max(row, xmax)
if(is_pause(row)){
# we found a pause
pauses_min <- pauses_min %>% append(xmin)
pauses_max <- pauses_max %>% append(xmax)
}
}
list(min=pauses_min, max=pauses_max)
}
add_pauses <- function(text_grid, pauses, target_tier=4, pause_label="P") {
new_text_grid = c()
tier <- -1
xmin <- -1
xmax <- -1
current_pause <- 1
for (row in text_grid) {
tier <- extract_tier(row, tier)
if (tier != target_tier){
# skip to next row (from input text_grid)
# (don't run the lines after in the for loop)
new_text_grid <- c(new_text_grid, row)
next
}
xmin <- extract_min(row, xmin)
xmax <- extract_max(row, xmax)
if(current_pause <= length(pauses$min)
& xmin == pauses$min[current_pause]
& xmax == pauses$max[current_pause]
& str_detect(row, "text =")
) {
# we found an interval matching a pause
row <- gsub("text = \"\"", "text = \"P\"", row)
current_pause <- current_pause + 1 # look for the next pause
}
new_text_grid <- c(new_text_grid, row)
}
new_text_grid
}
save_new_text_grid <- function(source_file, new_text_grid) {
dest_dir <- paste(dirname(source_file), "fixed", sep = '/')
dir.create(dest_dir, showWarnings = FALSE)
dest_file <- paste(dest_dir, basename(source_file), sep = '/')
fileConn <- file(dest_file)
writeLines(new_text_grid, fileConn)
close(fileConn)
sprintf("File %s fixed and saved to %s", source_file, dest_file)
}
add_pauses_file <- function(source_file) {
text_grid <-  readLines(source_file)
pauses <- find_pauses(text_grid)
print(paste(source_file, "Found", length(pauses$min), "pauses"))
new_text_grid <- add_pauses(text_grid, pauses)
save_new_text_grid(source_file, new_text_grid)
}
# Find multiple files in directory
add_pauses_in_directory <- function(directory) {
for (f in list.files(directory, full.names = TRUE, pattern = ".+TextGrid")) {
add_pauses_file(f)
}
}
# Select directory to be used
add_pauses_in_directory("/Users/catalina/Desktop/UoM-G-Drive/Pitjantjara_ConverbProsody/data-30.08.2021/Ana3-batches/Batch 21/new")
# Select directory to be used
add_pauses_in_directory("/Users/catalina/Desktop/UoM-G-Drive/Pitjantjara_ConverbProsody/data-30.08.2021/Ana3-batches/Batch 22/new")
# Select directory to be used
add_pauses_in_directory("/Users/catalina/Desktop/UoM-G-Drive/Pitjantjara_ConverbProsody/data-30.08.2021/Ana3-batches/Batch 23/new")
# Select directory to be used
add_pauses_in_directory("/Users/catalina/Desktop/UoM-G-Drive/Pitjantjara_ConverbProsody/data-30.08.2021/Ana3-batches/Batch 24/new")
# Select directory to be used
add_pauses_in_directory("/Users/catalina/Desktop/UoM-G-Drive/Pitjantjara_ConverbProsody/data-30.08.2021/Ana3-batches/Batch 25/new")
# Select directory to be used
add_pauses_in_directory("/Users/catalina/Desktop/UoM-G-Drive/Pitjantjara_ConverbProsody/data-30.08.2021/Ana3-batches/Batch 26/new")
remove_text_from_tier_5 <- function(source_file){
text_grid <-  readLines(source_file)
new_text_grid = c()
in_tier_5 <- FALSE
for (row in text_grid){
if(grepl("item [5]:", row, fixed=TRUE)){
in_tier_5 <- TRUE
}
if(grepl("item [6]:", row, fixed=TRUE)){
in_tier_5 <- FALSE
}
if(in_tier_5){
row <- gsub("text = \".*\"", "text = \"\"", row)
}
new_text_grid <- c(new_text_grid, row)
}
dest_dir <- paste(dirname(source_file), "fixed", sep = '/')
dir.create(dest_dir, showWarnings = FALSE)
dest_file <- paste(dest_dir, basename(source_file), sep = '/')
fileConn<-file(dest_file)
writeLines(new_text_grid, fileConn)
close(fileConn)
sprintf("File %s fixed and saved to %s",source_file, dest_file)
}
# Find multiple files in directory
fix_textgrids_in_directory <- function(directory){
for (f in list.files(directory, full.names = TRUE, pattern = ".+TextGrid")) {
remove_text_from_tier_5(f)
}
}
# Select directory to be used
fix_textgrids_in_directory("/Users/catalina/Desktop/UoM-G-Drive/Pitjantjara_ConverbProsody/data-30.08.2021/Analysis3-prior-annotation/new")
find_pauses <- function(text_grid) {
pauses_min <- c()
pauses_max <- c()
tier <- -1
xmin <- -1
xmax <- -1
pause <- FALSE
for (row in text_grid) {
tier <- extract_tier(row, tier)
if (tier != 6 ){
# skip to next row (from input text_grid)
# (don't run the lines after in the for loop)
next
}
xmin <- extract_min(row, xmin)
xmax <- extract_max(row, xmax)
if(is_pause(row)){
# we found a pause
pauses_min <- pauses_min %>% append(xmin)
pauses_max <- pauses_max %>% append(xmax)
}
}
list(min=pauses_min, max=pauses_max)
}
library(stringr)
is_pause <- function(row){
new <- str_match(row, "text = \"<p:>\"")[1]
! is.na(new) # Regex matched
}
extract_tier <- function(row, current){
new <- str_match(row, "item \\[(\\d+)\\]:")[2]
if(is.na(new)){ # Regex did not match anything
current
} else {
strtoi(new) # convert to integer
}
}
extract_min <- function(row, current){
new <- str_match(row, "xmin = (.+)")[2]
if(is.na(new)){
current
} else {
as.numeric(new) # convert to numeric
}
}
extract_max <- function(row, current){
new <- str_match(row, "xmax = (.+)")[2]
if(is.na(new)){
current
} else {
as.numeric(new)
}
}
find_pauses <- function(text_grid) {
pauses_min <- c()
pauses_max <- c()
tier <- -1
xmin <- -1
xmax <- -1
pause <- FALSE
for (row in text_grid) {
tier <- extract_tier(row, tier)
if (tier != 6 ){
# skip to next row (from input text_grid)
# (don't run the lines after in the for loop)
next
}
xmin <- extract_min(row, xmin)
xmax <- extract_max(row, xmax)
if(is_pause(row)){
# we found a pause
pauses_min <- pauses_min %>% append(xmin)
pauses_max <- pauses_max %>% append(xmax)
}
}
list(min=pauses_min, max=pauses_max)
}
add_pauses <- function(text_grid, pauses, target_tier=4, pause_label="P") {
new_text_grid = c()
tier <- -1
xmin <- -1
xmax <- -1
current_pause <- 1
for (row in text_grid) {
tier <- extract_tier(row, tier)
if (tier != target_tier){
# skip to next row (from input text_grid)
# (don't run the lines after in the for loop)
new_text_grid <- c(new_text_grid, row)
next
}
xmin <- extract_min(row, xmin)
xmax <- extract_max(row, xmax)
if(current_pause <= length(pauses$min)
& xmin == pauses$min[current_pause]
& xmax == pauses$max[current_pause]
& str_detect(row, "text =")
) {
# we found an interval matching a pause
row <- gsub("text = \"\"", "text = \"P\"", row)
current_pause <- current_pause + 1 # look for the next pause
}
new_text_grid <- c(new_text_grid, row)
}
new_text_grid
}
save_new_text_grid <- function(source_file, new_text_grid) {
dest_dir <- paste(dirname(source_file), "fixed", sep = '/')
dir.create(dest_dir, showWarnings = FALSE)
dest_file <- paste(dest_dir, basename(source_file), sep = '/')
fileConn <- file(dest_file)
writeLines(new_text_grid, fileConn)
close(fileConn)
sprintf("File %s fixed and saved to %s", source_file, dest_file)
}
add_pauses_file <- function(source_file) {
text_grid <-  readLines(source_file)
pauses <- find_pauses(text_grid)
print(paste(source_file, "Found", length(pauses$min), "pauses"))
new_text_grid <- add_pauses(text_grid, pauses)
save_new_text_grid(source_file, new_text_grid)
}
# Find multiple files in directory
add_pauses_in_directory <- function(directory) {
for (f in list.files(directory, full.names = TRUE, pattern = ".+TextGrid")) {
add_pauses_file(f)
}
}
# Select directory to be used
add_pauses_in_directory("/Users/catalina/Desktop/UoM-G-Drive/Pitjantjara_ConverbProsody/data-30.08.2021/Analysis3-prior-annotation/new")
# Catalina Torres
#	catalina.torres@ivs.uzh.ch
#	(University of Zurich)
library(stringr)
extract_tier <- function(row, current){
new <- str_match(row, "item \\[(\\d+)\\]:")[2]
if(is.na(new)){
current
} else {
strtoi(new)
}
}
extract_interval <- function(row, current){
new <- str_match(row, "intervals \\[(\\d+)\\]:")[2]
if(is.na(new)){
current
} else {
strtoi(new)
}
}
extract_interval_count <- function(row, current){
new <- str_match(row, "intervals: size = (\\d+)")[2]
if(is.na(new)){
current
} else {
strtoi(new)
}
}
move_boundary_file <- function(source_file, move_left=TRUE, move_right=TRUE) {
text_grid <-  readLines(source_file)
boundary <- find_boundary(text_grid)
new_text_grid <- move_boundary(text_grid, boundary[1], boundary[2])
save_new_text_grid(source_file, new_text_grid)
}
find_boundary <- function(text_grid) {
replace_value <- c()
tier <- -1
interval <- -1
interval_count <- -10
for (row in text_grid) {
tier <- extract_tier(row, tier)
if (tier != 4 ){
# skip to next row (from input text_grid)
# (don't run the lines after in the for loop)
next
}
interval_count <- extract_interval_count(row, interval_count)
interval <- extract_interval(row, interval)
print(row)
print(paste(interval_count, interval))
if (tier == 4 & interval == 1 &
grepl("xmax", row, fixed = TRUE)) {
left_boundary <- gsub("\\s+xmax = ","",row) # \\s+ means one or more (+) space characters
} else if (tier == 4 & interval == interval_count
& grepl("xmin", row, fixed = TRUE)){ # 4th tier, last interval
right_boundary <- gsub("\\s+xmin = ","",row)
}
}
c(left_boundary, right_boundary )
}
move_boundary <- function(text_grid, left_boundary, right_boundary) {
new_text_grid = c()
tier <- -1
interval <- -1
interval_count <- -10
for (row in text_grid) {
tier <- extract_tier(row, tier)
interval_count <- extract_interval_count(row, interval_count)
interval <- extract_interval(row, interval)
if (tier <= 3 & interval == 1) {
row <- gsub("xmax = .*", paste("xmax =", left_boundary), row)
}
if (tier <=  3 & interval == 2) {
row <- gsub("xmin = .*", paste("xmin =", left_boundary), row)
}
if (tier <= 3 & interval == interval_count) {
row <- gsub("xmin = .*", paste("xmin =", right_boundary), row)
}
if (tier <=  3 & interval == interval_count - 1) {
row <- gsub("xmax = .*", paste("xmax =", right_boundary), row)
}
new_text_grid <- c(new_text_grid, row)
}
new_text_grid
}
save_new_text_grid <- function(source_file, new_text_grid) {
dest_dir <- paste(dirname(source_file), "fixed", sep = '/')
dir.create(dest_dir, showWarnings = FALSE)
dest_file <- paste(dest_dir, basename(source_file), sep = '/')
fileConn <- file(dest_file)
writeLines(new_text_grid, fileConn)
close(fileConn)
sprintf("File %s fixed and saved to %s", source_file, dest_file)
}
# Find multiple files in directory
move_boundary_in_directory <- function(directory) {
for (f in list.files(directory, full.names = TRUE, pattern = ".+TextGrid")) {
move_boundary_file(f)
}
}
# Select directory to be used
move_boundary_in_directory("/Users/catalina/Desktop/Central Pame/Grabaciones Pame Central/First pass Pame/newGrids")
